/* visible-grid - v0.2.0 - MIT */
/* Design and develop with a visible grid */
/* https://github.com/stephenhutchings/visible-grid.git */
"use strict";var _createClass=function(){function n(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(e,t,i){return t&&n(e.prototype,t),i&&n(e,i),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}!function(i,n,v){var e,x,s;x=i.devicePixelRatio||1,s="visible-grid",e=function(){function t(){var e;_classCallCheck(this,t),this.el=n.createElement("div"),e="grid-"+v.random().toFixed(8).split(".")[1],this.el.setAttribute("id",e),this.el.innerHTML=this.template(e),this.elements={canvas:this.el.querySelector("canvas"),form:this.el.querySelector("form")},this.keys=["gutter","columns","size","color","baseline","offset","grid","divisions","constrain","gridOffset","gridOrigin"],this.context=this.elements.canvas.getContext("2d"),n.body.appendChild(this.el,"beforeEnd"),this.load(),this.bindEvents()}return _createClass(t,[{key:"getIndex",value:function(){return+this.elements.form.select.value}},{key:"bindEvents",value:function(){return this.el.addEventListener("input",this,!1),this.el.addEventListener("click",this,!1),this.el.addEventListener("submit",this,!1),i.addEventListener("keydown",this,!1),i.addEventListener("resize",this,!1)}},{key:"handleEvent",value:function(e){switch(e.type){case"click":if(e.target===this.elements.form.remove&&this.remove(),e.target===this.elements.form.add&&this.prompt(),e.target===this.elements.form.reset)return this.reset();break;case"keydown":return this.__keyDown(e);case"input":return this.__input(e),this.draw();case"resize":return this.__resize(e),this.draw();case"submit":return e.preventDefault(),!1}}},{key:"__keyDown",value:function(e){var t,i;switch(t=this.getIndex(),e.keyCode){case 37:if(e.target===n.body)return 0<this.grids[t].columns&&this.grids[t].columns--,this.select(t);break;case 39:if(e.target===n.body)return this.grids[t].columns++,this.select(t);break;case 85:return this.elements.form.classList.toggle("disable");case 71:if(i=this.elements.canvas.classList.contains("disable"),this.elements.canvas.classList.toggle("disable"),!i)return this.elements.form.classList.add("disable")}}},{key:"__input",value:function(e){var t,i,n,s,o,r;if(e.target.value){if(t=this.getIndex(),e.target===this.elements.form.select)return this.select(t);if(e.target===this.elements.form.responsive)return this.__resize(!0);for(i=0,s=(o=this.keys).length;i<s;i++)n=o[i],r=function(){switch(this.elements.form[n].type){case"number":return function(e){return parseInt(e.value,10)};case"checkbox":return function(e){return e.checked};default:return function(e){return e.value}}}.call(this),this.grids[t][n]=r(this.elements.form[n]);return this.save()}}},{key:"__resize",value:function(e){var o,t,r,l,a;return a=n.body.offsetWidth,t=n.body.offsetHeight,this.el.style.height=t+"px",this.elements.canvas.width=a*x,this.elements.canvas.height=t*x,r=e&&this.elements.form.responsive.checked?function(){var e,t,i,n;for(i=this.grids,n=[],r=e=0,t=i.length;e<t;r=++e){var s=i[r];l=s.size,o=s.gutter,l+o<a&&n.push(r)}return n}.call(this)[0]:function(){var e,t,i,n;for(i=this.grids,n=[],r=e=0,t=i.length;e<t;r=++e)i[r].active&&n.push(r);return n}.call(this)[0],this.select(r||0)}},{key:"select",value:function(e){var t,i,n,s,o,r,l,a;for(this.elements.form.select.value=e,i=0,o=(l=this.keys).length;i<o;i++)n=l[i],function(){switch(this.elements.form[n].type){case"checkbox":return function(e,t){return e.checked=t};default:return function(e,t){return e.value=t||0}}}.call(this)(this.elements.form[n],this.grids[e][n]);for(t=s=0,r=(a=this.grids).length;s<r;t=++s)a[t].active=e===t;return this.save(),this.draw()}},{key:"prompt",value:function(){var e,t;if(e=this.grids.length,"Enter a name for your new grid",t=i.prompt("Enter a name for your new grid","Grid #"+(e+1)))return this.add({name:t,columns:12,size:1200,gutter:20,baseline:18,color:"lightcoral",constrain:!0}),this.select(e)}},{key:"add",value:function(e){var t;return t=this.grids.length,this.elements.form.select.innerHTML+="<option value='"+t+"'>"+e.name+"</option>",this.grids.push(e),this.elements.form.remove.removeAttribute("disabled"),this.save()}},{key:"remove",value:function(s){var o,e,t,i;if(1!==this.grids.length){for(o=function(){var e,t,i,n;for(i=this.grids,n=[],o=e=0,t=i.length;e<t;o=++e)i[o].name===s&&n.push(o);return n}.call(this)[0]||this.getIndex(),this.elements.form.select.children[o].remove(),this.grids.splice(o,1),i=this.elements.form.select.children,o=e=0,t=i.length;e<t;o=++e)i[o].value=o;return 1===this.grids.length&&this.elements.form.remove.setAttribute("disabled","disabled"),this.save()}}},{key:"draw",value:function(){var e,t,i,n=this.elements.canvas;return i=n.width,t=n.height,null==(e=Object.assign({},this.grids[this.getIndex()])).size&&(e.size=0),null==e.gutter&&(e.gutter=0),null==e.offset&&(e.offset=0),null==e.constrain&&(e.constrain=!1),e.gutter*=x,e.size*=x,e.baseline*=x,e.grid*=x,e.size<1&&(e.size=i-e.gutter),e.x=(i-e.size)/2,e.colWidth=(e.size+e.gutter)/e.columns-e.gutter,this.elements.form.column.value=0<e.columns?((e.colWidth-e.gutter)/x).toFixed(2):"None",this.context.strokeStyle=e.color,this.context.fillStyle=e.color,this.context.lineWidth=1,this.context.clearRect(0,0,i,t),this.__drawColumns(e,i,t),this.__drawBaseline(e,i,t),this.__drawGrid(e,i,t)}},{key:"__drawColumns",value:function(e,t,i){var n,s,o,r,l;if(0!==e.columns){if(this.context.beginPath(),0===e.gutter){for(n=s=0,r=e.columns;0<=r?s<=r:r<=s;n=0<=r?++s:--s)0<n&&(this.context.moveTo(e.x+n*e.colWidth,0),this.context.lineTo(e.x+n*e.colWidth,i)),n<e.columns&&(this.context.moveTo(e.x+n*(e.colWidth+e.gutter),0),this.context.lineTo(e.x+n*(e.colWidth+e.gutter),i));return this.context.globalAlpha=1,this.context.stroke()}for(n=o=0,l=e.columns;0<=l?o<l:l<o;n=0<=l?++o:--o)this.context.rect(e.x+n*(e.colWidth+e.gutter),0,e.colWidth,i);return this.context.globalAlpha=.12,this.context.fill()}}},{key:"__drawBaseline",value:function(e,t,i){var n,s,o,r;if(0!==e.baseline){for(r=v.floor((i-e.offset)/e.baseline),this.context.beginPath(),n=s=0,o=r;0<=o?s<=o:o<=s;n=0<=o?++s:--s)this.context.moveTo(e.x,n*e.baseline+e.offset),this.context.lineTo(t-e.x,n*e.baseline+e.offset);return this.context.closePath(),this.context.globalAlpha=1,this.context.stroke(),this.context.beginPath()}}},{key:"__drawGrid",value:function(e,t,i){var n,s,o,r,l,a,c,u,d,h,p,m,f,g,b;if(0!==e.grid){switch(f=e.size,e.constrain||(e.x=0,f=t),b=e.gridOffset?e.gridOffset*x:0,m=v.floor((i-2*b)/e.grid),n=v.floor(f/e.grid),e.gridOrigin){case"Right":g=f-n*e.grid;break;case"Middle":g=(f-(n-1)*e.grid)/2,n-=1;break;default:g=0}for(this.context.beginPath(),o=r=0,u=m;0<=u?r<=u:u<=r;o=0<=u?++r:--r)this.context.moveTo(e.x,b+o*e.grid),this.context.lineTo(t-e.x,b+o*e.grid);for(o=l=0,d=n;0<=d?l<=d:d<=l;o=0<=d?++l:--l)this.context.moveTo(g+e.x+o*e.grid,b),this.context.lineTo(g+e.x+o*e.grid,i-b);if(0<e.divisions){for(g%=s=e.grid/e.divisions,m=v.floor((i-2*b)/s),n=v.floor((f-g)/s),o=a=0,h=m;0<=h?a<=h:h<=a;o=0<=h?++a:--a)this.context.moveTo(e.x,b+o*s),this.context.lineTo(t-e.x,b+o*s);for(o=c=0,p=n;0<=p?c<=p:p<=c;o=0<=p?++c:--c)this.context.moveTo(g+e.x+o*s,b),this.context.lineTo(g+e.x+o*s,i-b)}return this.context.globalAlpha=.33,this.context.stroke()}}},{key:"show",value:function(){return this.elements.form.classList.remove("disable"),this.elements.canvas.classList.remove("disable")}},{key:"hide",value:function(){return this.elements.form.classList.add("disable"),this.elements.canvas.classList.add("disable")}},{key:"save",value:function(){return localStorage.setItem(s,JSON.stringify(this.grids))}},{key:"load",value:function(){var e,t,i,n;for(this.grids=[],i=0,n=(t=function(){try{return JSON.parse(localStorage.getItem(s))}catch(e){}}()||this.defaults).length;i<n;i++)e=t[i],this.add(e);return this.__resize()}},{key:"reset",value:function(){return localStorage.removeItem(s),this.elements.form.select.innerHTML="",this.load()}}]),t}(),i.Grid=e}(window,document,Math),Grid.prototype.template=function(e){return"<style> #"+e+", #"+e+" canvas, #"+e+" form { position: absolute; top: 0; left: 0; width: 100%; height: 100%; } #"+e+' { z-index: 5000; pointer-events: none; font-size: 11px; line-height: 16px; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; } #'+e+" form, #"+e+" form * { all: unset; box-sizing: border-box; } #"+e+" form, #"+e+" label, #"+e+" footer { display: block; padding: 0; margin: 0; color: #ccc; } #"+e+" form { width: 160px; height: auto; margin: 10px; position: fixed; pointer-events: all; } #"+e+" fieldset { border: 0; padding: 0; margin: 0; background: rgba(0,0,0,0.88); background-clip: padding-box; display: block; } #"+e+" fieldset + fieldset { border-top: 1px solid rgba(0,0,0,0.5); } #"+e+" fieldset:first-child { border-radius: 2px 2px 0 0; } #"+e+" fieldset:last-child { border-radius: 0 0 2px 2px; } #"+e+" label { clear: both; margin-bottom: 0; cursor: pointer; font-weight: bold; padding: 1px 0; height: 22px; } #"+e+" .legend { font-weight: bold; width: 100%; margin: 0; border: none; padding: 4px 6px 2px; display: block; color: #fff; } #"+e+" label span { display: inline-block; min-width: 100px; position: relative; z-index: 1; padding-left: 6px; } #"+e+" label em { font-style: normal; font-family: monospace; color: #888; } #"+e+" input, #"+e+" select { color: inherit; } #"+e+" output { cursor: not-allowed; color: #888; } #"+e+' input[type="number"], #'+e+" output { display: inline-block; background: transparent; margin: 0; border: none; font: inherit; box-sizing: border-box; font-family: monospace; width: 100%; text-align: right; padding-left: 88px; margin-left: -103px; padding-right: 20px; margin-right: -20px; -webkit-appearance: none; } #"+e+' input[type="checkbox"] { float: right; margin-right: 20px; width: 16px; height: 16px; -webkit-appearance: checkbox; -moz-appearance: checkbox; } #'+e+" select { border: none; background: transparent; margin: 0; padding: 0 6px; background: url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='100' height='100' fill='#ffffff80'><polygon points='0,0 100,0 50,50'/></svg>\") no-repeat; background-size: 8px; background-position: calc(100% - 4px) 6px; background-repeat: no-repeat; } #"+e+' select[name="select"] { width: 100px; } #'+e+' select[name="gridOrigin"], #'+e+' select[name="color"] { width: 64px; margin-left: -10px; z-index: 1; position: relative; } #'+e+' input[type="button"] { border: none; background: transparent; margin-left: 3px; display: inline-block; border-radius: 3px; padding: 0 8px; height: 20px; text-align: center; font-weight: bold; } #'+e+" input::-webkit-inner-spin-button, #"+e+" input::-webkit-outer-spin-button { -webkit-appearance: none; margin: 0; } #"+e+" label:hover, #"+e+" input:hover { color: #eee; } #"+e+" input:focus, #"+e+" select:focus { outline: none; color: #fff; background-color: #444; } #"+e+" strong { color: #fff; } #"+e+" .disable { display: none; } #"+e+' footer { padding: 2px 6px 4px; background: transparent; } </style> <canvas></canvas> <form> <fieldset> <label> <select name="select"></select> <input title="Add grid" type="button" name="add" value="+" /> <input title="Delete grid" type="button" name="remove" value="–" /> </label> <label> <span>Color</span> <select name="color"> <option value="black">Black</option> <option value="white">White</option> <option value="coral">Orange</option> <option value="crimson">Red</option> <option value="chartreuse">Green</option> <option value="deeppink">Pink</option> <option value="aquamarine">Cyan</option> <option value="dodgerblue">Blue</option> <option value="lightcoral">Peach</option> <option value="rebeccapurple">Purple</option> </select> </label> <label title="Automatically choose the right grid for your viewport"> <span>Responsive</span> <input name="responsive" type="checkbox" checked> </label> </fieldset> <fieldset> <span class="legend">Columns</span> <label title="The number of columns"> <span>Columns</span> <input name="columns" type="number" min="0" max="30" /> </label> <label title="The total width of the grid without outer gutters. Set a value of 0 for full-width containers. "> <span>Container Width</span> <input name="size" type="number" min="0" /> <em>px</em> </label> <label title="The margin between each column"> <span>Gutter</span> <input name="gutter" type="number" min="0" /> <em>px</em> </label> <label title="The ideal line-height on which content should align"> <span>Baseline Grid</span> <input name="baseline" type="number" min="0" /> <em>px</em> </label> <label title="The vertical offset for the baseline grid"> <span>Baseline Offset</span> <input name="offset" type="number" min="0" /> <em>px</em> </label> <label title="The computed column width"> <span>Column Width</span> <output name="column" type="number"></output> <em>px</em> </label> </fieldset> <fieldset> <span class="legend">Document Grid</span> <label title="Create an additional grid"> <span>Size</span> <input name="grid" type="number" min="0" /> <em>px</em> </label> <label title="Create subdivisions within the document grid"> <span>Divisions</span> <input name="divisions" type="number" min="0" /> </label> <label title="Constrain the grid to the container width"> <span>Constrain</span> <input name="constrain" type="checkbox" /> </label> <label title="Inset the grid from the top of the page"> <span>Vertical Offset</span> <input name="gridOffset" type="number" /> <em>px</em> </label> <label title="Start the grid from the left, middle or right"> <span>Origin</span> <select name="gridOrigin"> <option selected>Left</option> <option>Middle</option> <option>Right</option> </select> </label> </fieldset> <fieldset> <footer> Toggle <strong>U</strong>I / <strong>G</strong>rid <input title="Reset all grids to defaults" name="reset" value="Reset" type="button"> </footer> </fieldset> <form>'},Grid.prototype.defaults=[{name:"Bootstrap LG",columns:12,size:1140,gutter:30,baseline:20,active:!0,color:"dodgerblue"},{name:"Bootstrap MD",columns:12,size:940,gutter:30,baseline:20,color:"chartreuse"},{name:"Bootstrap SM",columns:12,size:720,gutter:30,baseline:20,color:"rebeccapurple"},{name:"Bootstrap XS",columns:12,gutter:30,baseline:20,size:0,color:"lightcoral"},{name:"960 (12 Columns)",columns:12,size:940,gutter:20,color:"purple"},{name:"960 (16 Columns)",columns:16,size:940,gutter:20,color:"purple"},{name:"Grid (32px)",grid:32,size:1024,divisions:8,constrain:!0,color:"deeppink"},{name:"3-way Split",columns:3,color:"deeppink"}];